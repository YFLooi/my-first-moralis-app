import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import {
  useMoralis,
  useMoralisQuery,
  useMoralisSubscription,
  useMoralisCloudFunction,
} from "react-moralis";
import { useState } from "react";

const Home: NextPage = () => {
  const [avgGasPrices, setAvgGasPrices] = useState([]);

  // Moralis.start({ serverUrl, appId });
  const { user, logout, authenticate, isAuthenticated } = useMoralis();

  // Equivalent to Moralis.query()
  // runs on componentDidMount. Why not on call?
  // If I wanna query something else, I need to skip the use of obj destructuring
  // or use state to set the query params?
  // or break each into its own component?
  const EthTransactions = useMoralisQuery(
    "EthTransactions",
    (query) => {
      // Equivalent to this in non-react moralis:
      // const query = new Moralis.Query("EthTransactions");
      // query.equalTo("from_address", user.get("ethAddress"));
      // const results = await query.find();

      return query.equalTo("from_address", user?.get("ethAddress"));
    },
    [],

    {
      autoFetch: true, // Limit to fetching on demand if set to false
      live: true, // Allows subscribing to changes
    }
  );

  // Hook. Equivalent to Moralis.cloud()
  // Resulting obj has: { fetch data, error, isLoading }
  const getAvgGas = useMoralisCloudFunction("getAvgGas");

  // Subscribe to EthTransactions
  useMoralisSubscription("EthTransactions", (query) => query, [], {
    onCreate: (data) => {
      alert(
        `EthTransactions was just created for ${user?.get(
          "username"
        )}. Data: ${JSON.stringify(data, null, 2)}`
      );
    },
    onUpdate: (data) => {
      alert(
        `EthTransactions updated for ${user?.get(
          "username"
        )}. Data: ${JSON.stringify(data, null, 2)}`
      );
    },
  });

  async function moralisLogin() {
    if (!isAuthenticated) {
      await authenticate();
    } else {
      // Use optional chaining to prevent type error due to user possibly being null
      console.log(
        `logged in user: ${user?.get("username")}. Getting EthTransactions`
      );
      await getCurrentEthTransactionHistory();
    }
  }
  async function moralisLogout() {
    await logout();
    console.log("logged out user:", user?.get("username"));
  }
  function logCurrentUser() {
    console.log("logged in user:", user?.get("username"));
  }
  async function getCurrentEthTransactionHistory() {
    console.log(`Getting current ETH transaction history`);
    await EthTransactions.fetch();
    await getAverageGasPrices();

    if (EthTransactions.isLoading) {
      return `Still fetching`;
    } else {
      if (EthTransactions.error) {
        throw new Error(`Unable to fetch current ETH transaction history`);
      } else {
        console.log(`Transactions found: ${EthTransactions.data?.length}`);
        console.log(
          `Sample transaction: ${JSON.stringify(
            EthTransactions.data[0],
            null,
            2
          )}`
        );
        return EthTransactions.data;
      }
    }
  }
  async function getAverageGasPrices() {
    await getAvgGas.fetch();

    const results = getAvgGas.data as never[];
    console.log("average user gas prices:", getAvgGas.data);
    setAvgGasPrices((prevState) => [...results]);
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div>
          <h1>Gas stats with Moralis</h1>
          <button
            id="btn-login"
            className="btn btn-primary"
            onClick={() => {
              moralisLogin();
            }}
          >
            Moralis Login
          </button>
          <button
            id="btn-logout"
            className="btn btn-primary"
            onClick={() => {
              moralisLogout();
            }}
          >
            Moralis logout
          </button>
          <button
            onClick={() => {
              logCurrentUser();
            }}
          >
            Moralis user chk
          </button>
        </div>
        <div>
          <button
            className="btn btn-success"
            onClick={() => {
              getCurrentEthTransactionHistory();
            }}
          >
            Log transaction history
          </button>
        </div>
        <div>
          <h4>Average user gas prices</h4>
          <div>
            {avgGasPrices?.length == 0 ? (
              <div>No average gas prices obtained</div>
            ) : (
              <ul>
                {avgGasPrices.map(
                  (price: { avgGas: number; objectId: string }, index) => {
                    if (price.avgGas >= 0) {
                      return (
                        <li>
                          #{index + 1} {Math.round(price.avgGas)} gwei
                        </li>
                      );
                    } else {
                      return (
                        <li>
                          No avgGas for entry of objectId {price.objectId}
                        </li>
                      );
                    }
                  }
                )}
              </ul>
            )}
          </div>
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
};

export default Home;
